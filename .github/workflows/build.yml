name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  get-info:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
      date: ${{ steps.vars.outputs.date }}
      shorthash: ${{ steps.vars.outputs.shorthash }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Calculate version
        id: calculate_version
        run: |
          chmod +x ./calculate_new_version.sh
          echo "version=$(./calculate_new_version.sh)" >> $GITHUB_OUTPUT
      - name: Get date and git hash
        id: vars
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build:
    needs: get-info
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
          - os: ubuntu-24.04
            rid: linux-x64
          - os: macos-13
            rid: osx-x64
            # Intel runner
          - os: macos-14
            rid: osx-arm64
            # Apple Silicon
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: NuGet cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/global.json', '**/Directory.Packages.props', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore ReCap.Unpacker.sln

      - name: Publish
        run: dotnet publish src/ReCap.Unpacker/ReCap.Unpacker.csproj -c Release -r ${{ matrix.rid }} -p:PublishSingleFile=true -p:SelfContained=true -p:Version=${{ needs.get-info.outputs.version }} -o publish/${{ matrix.rid }}

      - name: Copy registries (Windows)
        if: matrix.rid == 'win-x64'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "publish\${{ matrix.rid }}\reg" | Out-Null
          Copy-Item -Path "registries\*" -Destination "publish\${{ matrix.rid }}\reg" -Recurse -Force

      - name: Copy registries (Unix)
        if: matrix.rid != 'win-x64'
        shell: bash
        run: |
          mkdir -p "publish/${{ matrix.rid }}/reg"
          cp -r registries/* "publish/${{ matrix.rid }}/reg/"

      - name: Package (Windows)
        if: matrix.rid == 'win-x64'
        shell: pwsh
        run: |
          Set-Location "publish/${{ matrix.rid }}"
          $base = "ReCap.Unpacker-${{ needs.get-info.outputs.version }}-${{ matrix.rid }}"
          Compress-Archive -Path * -DestinationPath ".\$base.zip" -Force
          Get-ChildItem

      - name: Package (Unix)
        if: matrix.rid != 'win-x64'
        shell: bash
        run: |
          cd "publish/${{ matrix.rid }}"
          base="ReCap.Unpacker-${{ needs.get-info.outputs.version }}-${{ matrix.rid }}"
          tar -czf "./${base}.tar.gz" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReCap.Unpacker-${{ needs.get-info.outputs.version }}-${{ matrix.rid }}
          path: |
            publish/${{ matrix.rid }}/*.zip
            publish/${{ matrix.rid }}/*.tar.gz
          if-no-files-found: error
          compression-level: 9

  create-release:
    needs: [get-info, build]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create git tag
        run: |
          TAG="v${{ needs.get-info.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-info.outputs.version }}
          name: ReCap.Unpacker v${{ needs.get-info.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Release date: ${{ needs.get-info.outputs.date }}
            Commit: ${{ needs.get-info.outputs.shorthash }}
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz
